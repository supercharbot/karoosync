import { handleSync } from './handlers/syncHandler.mjs';
import { handleProduct } from './handlers/productHandler.mjs';
import { handleData } from './handlers/dataHandler.mjs';
import { handleAccount } from './handlers/accountHandler.mjs'; // NEW IMPORT

const CORS_HEADERS = {
    'Access-Control-Allow-Origin': '',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': '',
    'Access-Control-Max-Age': '86400'
};

// Extract user ID from JWT
function extractUserId(event) {
    const authHeader = event.headers?.Authorization || event.headers?.authorization;
    
    if (!authHeader?.startsWith('Bearer ')) {
        throw new Error('No valid Authorization header');
    }
    
    try {
        const token = authHeader.substring(7);
        const parts = token.split('.');
        const payload = parts[1] + '='.repeat((4 - parts[1].length % 4) % 4);
        const decoded = JSON.parse(Buffer.from(payload, 'base64').toString());
        
        return decoded.sub;
    } catch (error) {
        throw new Error('Invalid JWT token');
    }
}

export const handler = async (event) => {
    console.log(`=== LAMBDA START: ${event.httpMethod} ===`);
    
    try {
        if (event.httpMethod === 'OPTIONS') {
            return {
                statusCode: 200,
                headers: CORS_HEADERS,
                body: ''
            };
        }
        
        const userId = extractUserId(event);
        
        // Route to appropriate handler based on action/method
        const action = event.queryStringParameters?.action;
        
        // Account management operations (NEW ROUTING)
        if (action === 'delete-account' ||
            action === 'create-backup' ||
            action === 'backup-status' ||
            action === 'download-backup' ||
            action === 'export-data') {
            return await handleAccount(event, userId);
        }
        
        // Sync operations: init-auth (GET) and sync (POST without action)
        if (action === 'init-auth' || (event.httpMethod === 'POST' && !action)) {
            return await handleSync(event, userId);
        }
        
        // Product operations: PUT requests and category management
        if (event.httpMethod === 'PUT' ||
            (event.httpMethod === 'POST' && action === 'create-category') ||
            (event.httpMethod === 'DELETE' && action === 'delete-category')) {
            return await handleProduct(event, userId);
        }
        
        // Data operations: check-data and load-category (GET)
        if (action === 'check-data' || action === 'load-category') {
            return await handleData(event, userId);
        }
        
        // Health check - default GET without action
        if (event.httpMethod === 'GET') {
            return {
                statusCode: 200,
                headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: 'healthy', timestamp: new Date().toISOString() })
            };
        }
        
        return {
            statusCode: 405,
            headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
            body: JSON.stringify({ success: false, error: 'Method not allowed' })
        };
        
    } catch (error) {
        console.error('‚ùå Error:', error);
        return {
            statusCode: 500,
            headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
            body: JSON.stringify({ success: false, error: error.message })
        };
    }
};